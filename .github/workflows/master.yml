name: prod

on:
  pull_request:
    types: [closed]
    branches:
      - master
  workflow_dispatch:

env:
  STACK_NAME: ${{ github.event.repository.name }}
  AWS_DEFAULT_REGION: eu-west-1

jobs:
  Build:
    name: build-prod
    #if: "github.event.pull_request.merged || github.ref == 'refs/heads/master'"
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #SLACK_COLOR: "${{ job.status == 'success' && 'good' || 'danger' }}"
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
          #IMAGE_TAG: ${{ github.event.number }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-prod:
    name: create-aws-prod
    needs: [Build]
    #if: "github.event.pull_request.merged || github.ref == 'refs/heads/master'"
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    # # environment:
    #   name: prod
    #   #url: URL_OF_THE_DEPLOYMENT
    env:
      #ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      ECR_REPOSITORY: ${{ github.event.repository.name }}
      #IMAGE_TAG: ${{ github.event.repository.owner.login }}-${{ github.event.repository.name }}-${{ github.sha }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Generate CloudFormation template
        id: cdk-synth
        env:
          DOMAIN_ZONE: ecs.demo3.allamand.com
          VPC_TAG_NAME: JenkinsKanikoStack/jenkins-vpc
          CLUSTER_NAME: jenkins-cluster

        run: |
          sudo npm install -g aws-cdk
          cd cdk
          npm ci
          npm run build
          cdk synth  > ../template.yml

      - name: Create preview environment CloudFormation stack
        run: aws cloudformation deploy --stack-name $STACK_NAME --template-file template.yml --capabilities CAPABILITY_NAMED_IAM

      - name: Retrieve preview environment URL
        run: aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[].Outputs[].OutputValue' | grep "https://"
